openapi: 3.0.3
info:
  title: User API
  description: |
    This API allows client to fetch, create, update or delete user profiles and user settings (e.g. notifications).
    User can follow, unfollow or report specific user, as well as list all followers for specific user.
    
    Note: Use this API only after user has valid credentials received using Auth API.
    
    Examples:
    new user -> Auth API (create account using email, password, Google etc.) -> receive JWT -> User API (create profile).
    old user -> Auth API (login) -> receive JWT -> User API.
  version: 0.3.2
  x-release-notes:
    - 0.3.2 Add creteDate in user response schema and standardize reactions endpoints.
    - 0.3.1 Expose marketing endpoints for user newsletter subscription.
    - 0.3.0 Add reactions endpoint, profile color, input validation, user activity flag and refactor common data models.
    - 0.2.2 Add required definition to CompactUser and AvatarContent.
    - 0.2.1 Add current active user endpoint.
    - 0.2.0 Add user relation to followers and following list.
    - 0.1.1 Add Idempotency key in header.
    - 0.1.0 Expose user management (get, create, update and delete user) and user community (follow/unfollow/report and fetch followers/following) endpoints.

tags:
  - name: User
    description: Operations for user management.
  - name: UserCommunity
    description: Operations related to user interactions.
  - name: Marketing
    description: Operations related to user marketing campaigns.

paths:
  /current-user:
    get:
      summary: Retrieve information about current active user.
      description: Retrieve information about current active user such as name, avatar etc.
      operationId: getCurrentActiveUser
      tags:
        - User
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        - $ref: './components/headers.yaml#/components/parameters/Authorization'
      responses:
        '200':
          $ref: '#/components/responses/GetUserResponse'
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /users:
    post:
      summary: Create new user.
      description: |
        Create new user with all required information. There can be some validation rules (e.g. password has to have minimum of 8 characters),
        and if provided data is not compliant, endpoint will return appropriate exception.
      operationId: createUser
      tags:
        - User
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Idempotency-Key'
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        - $ref: './components/headers.yaml#/components/parameters/Authorization'
      requestBody:
        $ref: '#/components/requestBodies/CreateUserRequest'
      responses:
        '201':
          $ref: '#/components/responses/GetUserResponse'
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /users/{username}:
    get:
      summary: Retrieve information about specific user.
      description: |
        Retrieve information about specific user such as name, avatar etc.
        If requested user is currently active user, additional information will be available.
      operationId: getUser
      tags:
        - User
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/Username'
      responses:
        '200':
          $ref: '#/components/responses/GetUserResponse'
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

    put:
      summary: Update specific user.
      description: |
        Update information about current active user, or if user has specific permissions he/she can also update data from other users.
        There can be some validation rules (e.g. password has to have minimum of 8 characters), and if provided data is not compliant, 
        endpoint will return appropriate exception.
      operationId: updateUser
      tags:
        - User
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Idempotency-Key'
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        - $ref: './components/headers.yaml#/components/parameters/Authorization'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/Username'
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserRequest'
      responses:
        '200':
          $ref: '#/components/responses/GetUserResponse'
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

    delete:
      summary: Delete specific user.
      description: User can delete his/her account, or if user has specific permissions he/she can also delete other users.
      operationId: deleteUser
      tags:
        - User
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Idempotency-Key'
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        - $ref: './components/headers.yaml#/components/parameters/Authorization'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/Username'
      responses:
        '204':
          description: Account was successfully deleted.
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /users/{username}/followers:
    get:
      summary: Get user follower list.
      description: Get the list of user followers.
      operationId: getFollowerList
      tags:
        - UserCommunity
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/Username'
        # query parameter
        - $ref: './components/parameters.yaml#/components/parameters/Sort'
        - $ref: './components/parameters.yaml#/components/parameters/Limit'
        - $ref: './components/parameters.yaml#/components/parameters/Page'
      responses:
        '200':
          $ref: '#/components/responses/GetUserFollowerListResponse'
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /users/{username}/following:
    get:
      summary: Get user following list.
      description: Get the list of users that he/she is following.
      operationId: getFollowingList
      tags:
        - UserCommunity
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/Username'
        # query parameter
        - $ref: './components/parameters.yaml#/components/parameters/Sort'
        - $ref: './components/parameters.yaml#/components/parameters/Limit'
        - $ref: './components/parameters.yaml#/components/parameters/Page'
      responses:
        '200':
          $ref: '#/components/responses/GetUserFollowingListResponse'
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /users/{username}/follow:
    post:
      summary: Follow specific user.
      description: Current active user can follow specific user provided with username.
      operationId: follow
      tags:
        - UserCommunity
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Idempotency-Key'
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        - $ref: './components/headers.yaml#/components/parameters/Authorization'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/Username'
      responses:
        '204':
          description: Current active user is now successfully following the user.
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /users/{username}/unfollow:
    post:
      summary: Unfollow specific user.
      description: Current active user can unfollow specific user provided with username.
      operationId: unfollow
      tags:
        - UserCommunity
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Idempotency-Key'
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        - $ref: './components/headers.yaml#/components/parameters/Authorization'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/Username'
      responses:
        '204':
          description: Current active user is now successfully unfollowed the user.
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /users/{username}/remove-follower:
    post:
      summary: Remove specific user from the followers list.
      description: Current active user can remove specific user from his/her followers list.
      operationId: removeFollower
      tags:
        - UserCommunity
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Idempotency-Key'
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        - $ref: './components/headers.yaml#/components/parameters/Authorization'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/Username'
      responses:
        '204':
          description: Current active user successfully removed the follower.
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /users/{username}/reactions:
    post:
      summary: React to specific user.
      description: Current active user can react to specific user. Supported action, for now, is only REPORT.
      operationId: react
      tags:
        - UserCommunity
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/Authorization'
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        - $ref: './components/headers.yaml#/components/parameters/X-Idempotency-Key'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/Username'
      requestBody:
        $ref: './components/parameters.yaml#/components/requestBodies/CreateReactionRequest'
      responses:
        '201':
          $ref: './components/responses.yaml#/components/responses/ReactionsResponse'
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /newsletters/subscription:
    post:
      summary: Subscribe an user to the newsletter.
      description: |
        Subscribes an anonymous user to the newsletter using their email. 
        If user already signup for the newsletter, bad request error will be returned.
      operationId: subscribe
      tags:
        - Marketing
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        - $ref: './components/headers.yaml#/components/parameters/X-Idempotency-Key'
      requestBody:
        $ref: '#/components/requestBodies/CreateNewsletterRequest'
      responses:
        '201':
          description: User successfully subscribed to the newsletter.
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

    delete:
      summary: Unsubscribe an user from the newsletter.
      description: |
        Unsubscribes an anonymous user from the newsletter using their email and one-time token.
        If it's used within the email body, please make sure to redirect user to some frontend page which will do this request
        and show confirmation or/and success message.
      operationId: unsubscribe
      tags:
        - Marketing
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        - $ref: './components/headers.yaml#/components/parameters/X-Idempotency-Key'
      requestBody:
        $ref: '#/components/requestBodies/DeleteNewsletterRequest'
      responses:
        '204':
          description: User successfully unsubscribed from the newsletter.
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'


components:
  requestBodies:
    CreateUserRequest:
      description: Create user profile.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateUser'

    UpdateUserRequest:
      description: Update user profile.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateUser'

    CreateNewsletterRequest:
      description: Create newsletter request.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscribeRequest'

    DeleteNewsletterRequest:
      description: Delete newsletter request.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnsubscribeRequest'

  responses:
    GetUserResponse:
      description: Get user related information.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetUser'

    GetUserFollowerListResponse:
      description: Get user follower list response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetUserList'

    GetUserFollowingListResponse:
      description: Get user following list response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetUserList'

  schemas:
    GetUser:
      type: object
      description: User information returned from server.
      required:
        - username
        - numberOfFollowers
        - numberOfFollowing
        - active
        - createdDate
      allOf:
        - $ref: '#/components/schemas/UserCommon'
        - type: object
          properties:
            username:
              $ref: './components/common.yaml#/components/schemas/Identifier'
            avatarUrl:
              $ref: '#/components/schemas/AvatarUrl'
            numberOfFollowers:
              type: integer
              description: Number of users who follows this user.
              example: 143
            numberOfFollowing:
              type: integer
              description: Number of users which this user follows.
              example: 256
            active:
              type: boolean
              description: Flag that indicates if user is active or account was deleted.
              example: false
            relation:
              $ref: '#/components/schemas/UserRelation'
            createdDate:
              type: string
              description: Date when user was created.
              format: date
              example: '9999-01-01'

    CreateUser:
      type: object
      description: |
        User provided information when creating new profile. User can create profile without supplying the username. 
        If that is the case, server will automatically create NanoID generated username. For more information about NannoID visit: https://github.com/ai/nanoid
      allOf:
        - $ref: '#/components/schemas/UserCommon'
        - type: object
          properties:
            username:
              $ref: './components/common.yaml#/components/schemas/Identifier'
            avatar:
              $ref: '#/components/schemas/AvatarContent'

    UpdateUser:
      type: object
      description: User provided information when updating profile.
      required:
        - username
      allOf:
        - $ref: '#/components/schemas/UserCommon'
        - type: object
          properties:
            username:
              $ref: './components/common.yaml#/components/schemas/Identifier'
            avatar:
              $ref: '#/components/schemas/AvatarContent'

    UserCommon:
      type: object
      description: Object holding user information with only user provided data.
      required:
        - displayName
        - email
      properties:
        displayName:
          $ref: '#/components/schemas/DisplayName'
        biography:
          type: string
          description: User personal biography.
          pattern: '^[^+/<>|\^$€£¥₹]*$'
          example: 'I love rock & roll'
        email:
          $ref: '#/components/schemas/EmailValue'
        phoneNumber:
          type: string
          description: User main phone number.
          pattern: '^[\+]?[0-9 ]*$'
          minLength: 1
          maxLength: 35
          example: '+1 234 567890'
        dateOfBirth:
          type: string
          description: User date of birth. This date should be in the past.
          format: date
          example: '9999-01-01'
        address:
          $ref: '#/components/schemas/Address'
        gender:
          type: string
          description: User selected gender.
          enum:
            - MALE
            - FEMALE
            - OTHER
        profileColor:
          type: string
          description: Profile color in hex format without transparency information. This is automatic generated.
          pattern: '^#[0-9a-fA-F]{6}$'
          example: '#001122'
        socialMedia:
          type: array
          description: List of user social media profiles.
          items:
            $ref: '#/components/schemas/SocialMedia'

    SocialMedia:
      type: object
      description: User social media profile.
      required:
        - url
        - type
      properties:
        url:
          type: string
          description: URL path to profile.
          maxLength: 500
        type:
          $ref: '#/components/schemas/SocialMediaType'

    SocialMediaType:
      type: string
      description: Social media network.
      enum:
        - FACEBOOK
        - X
        - INSTAGRAM

    Address:
      type: object
      description: User defined address.
      properties:
        city:
          description: User defined city name.
          type: string
          pattern: '^[\p{L} ]*$'
          example: 'Krk'
          minLength: 1
          maxLength: 35
        countryCode:
          type: string
          description: ISO 3166 ALPHA2 country code.
          pattern: '[A-Z]{2}'
          example: 'HR'
        location:
          $ref: '#/components/schemas/Location'

    Location:
      type: object
      description: Current user location selected on map or from GPS location - provided by client.
      required:
        - longitude
        - latitude
      properties:
        longitude:
          type: number
          example: 45.16406622076631
        latitude:
          type: number
          example: 14.540282331495733

    GetUserList:
      type: object
      description: List of users.
      required:
        - users
        - metadata
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/CompactUser'
        metadata:
          $ref: './components/responses.yaml#/components/schemas/PaginationMetadata'

    CompactUser:
      type: object
      description: Object that holds only required user information.
      allOf:
        - $ref: './components/responses.yaml#/components/schemas/Creator'
        - type: object
          properties:
            relation:
              $ref: '#/components/schemas/UserRelation'

    SubscribeRequest:
      type: object
      description: All relevant data for newsletter subscription.
      required:
        - email
      properties:
        email:
          $ref: '#/components/schemas/EmailValue'

    UnsubscribeRequest:
      type: object
      description: All relevant data for unsubscribing from newsletter.
      allOf:
        - $ref: '#/components/schemas/SubscribeRequest'
        - type: object
          required:
            - token
          properties:
            token:
              type: string
              format: uuid
              description: Token used for unsubscribing from mailing list. This is one time generated unique value.
              example: '3c6dcd15-8aa2-4e1e-8d11-44e611edc9ad'

    DisplayName:
      type: string
      description: Human friendly user defined name.
      maxLength: 100
      example: 'Name Surname'

    EmailValue:
      type: string
      description: User email address.
      format: email
      maxLength: 140
      pattern: '^[a-zA-Z0-9.!#$%&*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$'
      example: 'user@example.com'

    AvatarUrl:
      type: string
      description: Profile picture. If user did not set profile picture, this field will not be present in response.
      example: 'logo.png'

    AvatarContent:
      type: object
      description: User uploaded image. If content is not sent, user avatar will not change.
      required:
        - bytes
      properties:
        bytes:
          type: string
          format: byte
          example: 'TXkgcGhvdG8='

    UserRelation:
      type: string
      description: |
        Relation between currently active user and this user. If there is no relation this attribute will be omitted.
        If current user is same as requested user (e.g. user visited his/her own profile), value SELF will be returned.
      enum:
        - FOLLOWING
        - BLOCKED
        - SELF