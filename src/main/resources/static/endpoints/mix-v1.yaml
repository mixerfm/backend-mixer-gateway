openapi: 3.0.3

info:
  title: Mixes API
  description: |
    This API allows client to fetch specific mix or category of mixes (e.g. uploaded, liked or listened mixes). 
    For registered user, this API allows him/her to create new or update/delete existing mix.
    Mix contain a group of tracks which can be played using Player API.
  version: 0.4.0
  x-release-notes:
    - 0.4.0 Add reactions endpoint, pagination to get specific collections endpoint and refactor common data models.
    - 0.3.1 Few wording fixes.
    - 0.3.0 Add Authorization and Idempotency headers, also add artists, nsfw and mix type attributes to response.
    - 0.2.0 Expose get endpoints for specific and list of collections. Add like/dislike endpoints for mix and collections.
    - 0.1.0 Expose get endpoints for specific mix; uploaded, listened and played mixes for specific user.

tags:
  - name: Collections
    description: Available actions for a collection fetch and management.
  - name: Mixes
    description: Available actions for a mix fetch and management.

paths:
  /collections:
    get:
      summary: Retrieve list of collections.
      description: |
        Retrieve list of collections with data such as name, avatar, tags etc. 
        Client can also fetch list of mixes inside collections with additional attributes.
      operationId: getCollectionList
      tags:
        - Collections
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        # query parameter
        - $ref: './components/parameters.yaml#/components/parameters/Limit'
        - $ref: './components/parameters.yaml#/components/parameters/Page'
        - $ref: './components/parameters.yaml#/components/parameters/Sort'
        - $ref: '#/components/parameters/MixCount'
        - $ref: '#/components/parameters/MixSort'
      responses:
        '200':
          $ref: '#/components/responses/GetCollectionListResponse'
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /collections/{collectionId}:
    get:
      summary: Retrieve specific collection.
      description: |
        For specific collection, retrieve whole list of mixes and information such as name, avatar etc.
        Client can sort, paginate and filter mixes using standard parameters which are applied to mixes not collection itself.
      operationId: getSingleCollection
      tags:
        - Collections
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        # path parameter
        - $ref: '#/components/parameters/CollectionIdentifier'
        # query parameter
        - $ref: './components/parameters.yaml#/components/parameters/Filter'
        - $ref: './components/parameters.yaml#/components/parameters/Limit'
        - $ref: './components/parameters.yaml#/components/parameters/Page'
        - $ref: './components/parameters.yaml#/components/parameters/Sort'
      responses:
        '200':
          $ref: '#/components/responses/GetSingleCollectionResponse'
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /collections/{collectionId}/reactions:
    post:
      summary: React to specific collection.
      description: Current active user can react to specific collection. Supported actions are - LIKE, DISLIKE and REPORT.
      operationId: react
      tags:
        - Collections
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/Authorization'
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        - $ref: './components/headers.yaml#/components/parameters/X-Idempotency-Key'
        # path parameter
        - $ref: '#/components/parameters/CollectionIdentifier'
      requestBody:
        $ref: './components/parameters.yaml#/components/requestBodies/CreateReactionRequest'
      responses:
        '204':
          description: User successfully reacted to the collection.
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

    delete:
      summary: Remove reaction to the specific collection.
      description: Current active user can remove reaction to the specific collection.
      operationId: removeReaction
      tags:
        - Collections
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/Authorization'
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        - $ref: './components/headers.yaml#/components/parameters/X-Idempotency-Key'
        # path parameter
        - $ref: '#/components/parameters/CollectionIdentifier'
      responses:
        '204':
          description: User successfully removed reaction to the collection.
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /mixes/{mixId}:
    get:
      summary: Retrieve specific mix.
      description: For specific mix retrieve information such as name, avatar, duration etc.
      operationId: getSingleMix
      tags:
        - Mixes
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/MixIdentifier'
      responses:
        '200':
          $ref: '#/components/responses/GetSingleMixResponse'
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /mixes/{mixId}/reactions:
    post:
      summary: React to specific mix.
      description: Current active user can react to specific mix. Supported actions are - LIKE, DISLIKE and REPORT.
      operationId: react
      tags:
        - Mixes
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/Authorization'
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        - $ref: './components/headers.yaml#/components/parameters/X-Idempotency-Key'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/MixIdentifier'
      requestBody:
        $ref: './components/parameters.yaml#/components/requestBodies/CreateReactionRequest'
      responses:
        '204':
          description: User successfully reacted to the mix.
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

    delete:
      summary: Remove reaction to the specific mix.
      description: Current active user can remove reaction to the specific mix.
      operationId: removeReaction
      tags:
        - Mixes
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/Authorization'
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        - $ref: './components/headers.yaml#/components/parameters/X-Idempotency-Key'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/MixIdentifier'
      responses:
        '204':
          description: User successfully removed reaction to the mix.
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /mixes/{username}/uploaded:
    get:
      summary: Retrieve user uploaded list of mixes.
      description: For specific user retrieve list of uploaded mixes with information such as upload date, name, avatar, duration etc.
      operationId: getUserUploadedMixes
      tags:
        - Mixes
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/Username'
        # query parameter
        - $ref: './components/parameters.yaml#/components/parameters/Sort'
        - $ref: './components/parameters.yaml#/components/parameters/Limit'
        - $ref: './components/parameters.yaml#/components/parameters/Page'
      responses:
        '200':
          $ref: '#/components/responses/GetUserUploadedMixesResponse'
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /mixes/{username}/liked:
    get:
      summary: Retrieve user liked list of mixes.
      description: For specific user retrieve list of liked mixes with information such as time when user liked it and other mix related data.
      operationId: getUserLikedMixes
      tags:
        - Mixes
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/Username'
        # query parameter
        - $ref: './components/parameters.yaml#/components/parameters/Sort'
        - $ref: './components/parameters.yaml#/components/parameters/Limit'
        - $ref: './components/parameters.yaml#/components/parameters/Page'
      responses:
        '200':
          $ref: '#/components/responses/GetUserLikedMixesResponse'
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

  /mixes/{username}/listened:
    get:
      summary: Retrieve user list of listened mixes.
      description: For specific user retrieve list of mixes which he/she listened. Items contain time of listening and other mix related data.
      operationId: getUserMixesHistory
      tags:
        - Mixes
      parameters:
        # headers
        - $ref: './components/headers.yaml#/components/parameters/X-Accept-Version'
        # path parameter
        - $ref: './components/parameters.yaml#/components/parameters/Username'
        # query parameter
        - $ref: './components/parameters.yaml#/components/parameters/Sort'
        - $ref: './components/parameters.yaml#/components/parameters/Limit'
        - $ref: './components/parameters.yaml#/components/parameters/Page'
      responses:
        '200':
          $ref: '#/components/responses/GetUserListenedMixesResponse'
        default:
          $ref: './components/responses.yaml#/components/responses/ErrorResponse'

components:
  parameters:
    MixCount:
      name: mixCount
      in: query
      description: |
        Attribute that defines if response should contain mixes, and if yes, how many from each collection.
        Not sending this attribute or putting it to value 0 indicates that this endpoint only return list of collections.
      required: false
      example: 10
      schema:
        type: integer
        default: 0
        minimum: 0

    MixSort:
      name: mixSort
      in: query
      description: Attribute that defines how mixes are ordered. This attribute will be ignored if mixCount is not greater than 0.
      required: false
      schema:
        $ref: './components/parameters.yaml#/components/schemas/SortSchema'

    CollectionIdentifier:
      name: collectionId
      in: path
      required: true
      schema:
        $ref: './components/common.yaml#/components/schemas/Identifier'

  responses:
    GetCollectionListResponse:
      description: List of collections.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionList'

    GetSingleCollectionResponse:
      description: Get single collection response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SingleCollection'

    GetSingleMixResponse:
      description: Get single mix response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SingleMix'

    GetUserUploadedMixesResponse:
      description: List of user uploaded mixes.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserUploadedMixes'

    GetUserLikedMixesResponse:
      description: List of user liked mixes.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserLikedMixes'

    GetUserListenedMixesResponse:
      description: List of user listened mixes.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserListenedMixes'

  schemas:
    CollectionList:
      type: object
      description: List of collections.
      required:
        - collections
        - metadata
      properties:
        collections:
          type: array
          items:
            $ref: '#/components/schemas/Collection'
        metadata:
          $ref: './components/responses.yaml#/components/schemas/PaginationMetadata'

    SingleCollection:
      description: Get information for specific collection.
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:
            description:
              type: string
              description: Collection description. If collection does not have description, this field will not be returned.
              example: 'My cool collection'

    SingleMix:
      description: Get single mix data. To actually play the mix use Player endpoint with mix identifier.
      allOf:
        - $ref: '#/components/schemas/Mix'
        - type: object
          properties:
            description:
              type: string
              description: Mix description. If mix does not have description, this field will not be returned.
              example: 'My cool mix'

    MixList:
      type: object
      description: List of mixes.
      required:
        - mixes
        - metadata
      properties:
        mixes:
          type: array
          items:
            $ref: '#/components/schemas/Mix'
        metadata:
          $ref: './components/responses.yaml#/components/schemas/PaginationMetadata'

    UserUploadedMixes:
      type: object
      description: List of user uploaded mixes.
      required:
        - mixes
        - metadata
      properties:
        mixes:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Mix'
              - type: object
                required:
                  - uploadedDateTime
                properties:
                  uploadedDateTime:
                    type: string
                    format: date-time
                    description: Date and time when mix was uploaded.
                    example: '9999-01-01T12:00:00Z'
        metadata:
          $ref: './components/responses.yaml#/components/schemas/PaginationMetadata'

    UserLikedMixes:
      type: object
      description: List of user liked mixes.
      required:
        - mixes
        - metadata
      properties:
        mixes:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Mix'
              - type: object
                required:
                  - likedDateTime
                properties:
                  likedDateTime:
                    type: string
                    format: date-time
                    description: Date and time when mix was liked.
                    example: '9999-01-01T12:00:00Z'
        metadata:
          $ref: './components/responses.yaml#/components/schemas/PaginationMetadata'

    UserListenedMixes:
      type: object
      description: List of user listened mixes.
      required:
        - mixes
        - metadata
      properties:
        mixes:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Mix'
              - type: object
                required:
                  - listenedDateTime
                properties:
                  listenedDateTime:
                    type: string
                    format: date-time
                    description: Date and time when mix was uploaded.
                    example: '9999-01-01T12:00:00Z'
        metadata:
          $ref: './components/responses.yaml#/components/schemas/PaginationMetadata'

    Collection:
      type: object
      description: |
        Object holding all relevant data for specific collection. Paginated list of mixes in collection is present only 
        if mixCount variable is set and greater than 0 or client requested specific mix.
      required:
        - identifier
        - name
        - author
        - visibility
        - tags
        - artists
      properties:
        identifier:
          $ref: './components/common.yaml#/components/schemas/Identifier'
        name:
          type: string
          description: Name of the collection.
          maxLength: 255
        avatarUrl:
          type: string
          description: Cover art or icon of the collection. If author did not set collection cover art, it will not be present in response.
          example: 'logo.png'
        author:
          $ref: './components/responses.yaml#/components/schemas/Creator'
        visibility:
          $ref: '#/components/schemas/Visibility'
        reactions:
          $ref: './components/responses.yaml#/components/schemas/UserReactions'
        artists:
          type: array
          description: List of artists in the collection.
          default: [ ]
          items:
            $ref: './components/responses.yaml#/components/schemas/Creator'
          example:
            - username: 'V1StGXR8z5'
              displayName: 'Pink Floyd'
              avatarUrl: 'logo.png'
              active: true
        tags:
          type: array
          description: List of collection tags.
          default: [ ]
          items:
            $ref: '#/components/schemas/Tag'
          example:
            - 'Rock'
            - 'Happy'
        mixes:
          $ref: '#/components/schemas/MixList'

    Mix:
      type: object
      description: Object holding all relevant data for specific mix.
      required:
        - identifier
        - name
        - author
        - numberOfPlays
        - numberOfComments
        - numberOfLikes
        - numberOfTracks
        - duration
        - visibility
        - nsfw
        - artists
        - tags
      properties:
        identifier:
          $ref: './components/common.yaml#/components/schemas/Identifier'
        name:
          type: string
          description: Name of the mix.
          maxLength: 255
        avatarUrl:
          type: string
          description: Cover art of the mix. If author did not set mix cover art, it will not be present in response.
          example: 'logo.png'
        author:
          $ref: './components/responses.yaml#/components/schemas/Creator'
        numberOfPlays:
          type: integer
          description: Total number of mix plays.
          minimum: 0
        numberOfComments:
          type: integer
          description: Total number of mix comments.
          minimum: 0
        numberOfLikes:
          type: integer
          description: Total number of mix likes.
          minimum: 0
        numberOfTracks:
          type: integer
          description: Total number of tracks.
          example: 13
          minimum: 0
        duration:
          type: string
          format: ISO 8601 duration
          description: Total duration of the mix. If there is no tracks in list PT0S is returned.
          example: 'PT1H25M14S'
        visibility:
          $ref: '#/components/schemas/Visibility'
        type:
          $ref: '#/components/schemas/MixType'
        reactions:
          $ref: './components/responses.yaml#/components/schemas/UserReactions'
        nsfw:
          type: boolean
          description: Flag that indicates if this mix is safe for work, if true than mix is not safe for work.
          example: false
        artists:
          type: array
          description: List of artists in the mix.
          default: [ ]
          items:
            $ref: './components/responses.yaml#/components/schemas/Creator'
          example:
            - username: 'V1StGXR8z5'
              displayName: 'Pink Floyd'
              avatarUrl: 'logo.png'
              active: true
        tags:
          type: array
          description: List of mix tags.
          default: [ ]
          items:
            $ref: '#/components/schemas/Tag'
          example:
            - 'Rock'
            - 'Happy'

    MixType:
      type: string
      description: Type of the mix based on number of likes and plays. If not present in response than mix did not qualify for any of available types.
      example: DIAMOND
      enum:
        - GEM
        - GOLD
        - PLATINUM
        - DIAMOND

    Visibility:
      type: string
      description: Define mix visibility which can be private, public (visible) or visible only to premium users.
      enum:
        - PRIVATE
        - PUBLIC
        - PREMIUM

    Tag:
      type: string
      description: Tag can be anything attached to mix, from music genre to the mood.
      example: 'Rock'
