components:
  parameters:
    Username:
      name: username
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/UsernameSchema'
    Sort:
      name: sort
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/SortSchema'
    Limit:
      name: limit
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/LimitSchema'
    Page:
      name: page
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/PageSchema'
    Filter:
      name: filter
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/FilterSchema'

  schemas:
    UsernameSchema:
      type: string
      description: The unique user identifier used for fetching specific set of information.
      example: 'V1StGXR8z5'

    SortSchema:
      type: array
      description: |
        List of fields which define how to sort the list of results. Each field can contain two parts separated with colon.
        First field is the name of sort variable which is required, and the second one is sort order which can be asc or desc.
        Examples: 
        "https://www.example.com/list?sort=popularity&sort=date:desc&sort=name:asc"
        "https://www.example.com/list?sort=popularity,date:desc,name:asc"

        Possible values are:
          * date - sort by date of action (e.g. when mix was uploaded, or user started following someone, etc.)
          * name - sort by name of a resource (e.g. user display name, mix name, etc.)
          * popularity - sort by popularity (e.g. popular uploaded mixes, most listened from liked mixes, popular artists etc.)
          * trend - sort by items which are gaining more attention (e.g. tags which becoming popular etc.)

        Default sorting order of values, if not specified otherwise are:
          * date - desc (which means newest items are on top)
          * name - asc (0 -> 9 -> A -> Z, sort is case insensitive)
          * popularity - desc (more popular items are by default on top)
          * trend - desc (more trending items are by default on top)
      default: [ 'date:desc' ]
      items:
        type: string
        pattern: '^(date|name|popularity|trend)(:(asc|desc))?$'
      example: [ 'date:desc', 'name' ]

    LimitSchema:
      type: integer
      description: Defines how many items from list should be fetched.
      default: 10
      minimum: 1
      maximum: 100
      example: 10

    PageSchema:
      type: integer
      description: |
        Define sub-items of result will be fetched. If limit is 10, than page = 1 will fetch results from 0 to 10, and
        if page = 2, then fetched results will be from 10 to 20. 
        If there are no items in requested page, response will be an error - resource not found.
      default: 1
      minimum: 1
      example: 1

    FilterSchema:
      type: array
      description: |
        List of tags used for fine-tuning collection response by filtering items based on tags. 
        If in collection item A has tag 1, and item B has tag 2, then by filtering by tag 2 client will only get item B.
        Examples: 
        "https://example.com/list?filter=Pink%20Floyd&filter=rock&filter=progressive"
        "https://example.com/list?filter=Pink%20Floyd,rock,progressive"
      default: [ ]
      items:
        type: string
      example: [ 'Pink Floyd', 'rock', 'progressive' ]