components:
  responses:
    ErrorResponse:
      description: Unexpected error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Creator:
      type: object
      description: |
        Object holding information about person or group of persons (that act as entity, e.g. music band) who can be user, author, artist etc..
      required:
        - username
        - displayName
        - active
      properties:
        username:
          $ref: './common.yaml#/components/schemas/Identifier'
        displayName:
          type: string
          description: Human friendly defined name.
          pattern: '^[a-zA-Z0-9_ ]*$'
          example: 'Name Surname'
        avatarUrl:
          type: string
          description: Profile picture. If person did not set profile picture, this field will not be present in response.
          example: 'logo.png'
        profileColor:
          type: string
          description: Profile color in hex format without transparency information. This is automatic generated.
          pattern: '^#[0-9a-fA-F]{6}$'
          example: '#001122'
        active:
          type: boolean
          description: Flag that indicates if user is active or account was deleted.
          example: false

    Device:
      type: object
      description: Device on which client can listen the music.
      allOf:
        - $ref: '#/components/schemas/DeviceCommon'
        - type: object
          required:
            - identifier
          properties:
            identifier:
              $ref: './common.yaml#/components/schemas/Identifier'
            current:
              type: boolean
              description: Flag that indicates if this device is currently active.
              example: false

    DeviceCommon:
      type: object
      description: Device common properties.
      required:
        - name
        - type
      properties:
        name:
          type: string
          description: User defined device name.
          example: 'Samsung TV - Living Room'
        type:
          type: string
          description: Device type.
          enum:
            - ANDROID_TV
            - ANDROID_TABLET
            - ANDROID_PHONE
            - ANDROID_WATCH
            - APPLE_WATCH
            - IPHONE
            - IPAD
            - PLAY_STATION
            - WEB
            - XBOX

    Error:
      type: object
      description: Error model which holds information about an error.
      required:
        - identifier
        - type
        - description
      properties:
        identifier:
          type: string
          format: uuid
          description: Error code used for reporting purposes.
        type:
          $ref: '#/components/schemas/ErrorType'
        description:
          type: string
          description: Human readable description of the error which should be used only for debug purposes.

    ErrorType:
      type: string
      description: |
        Error code which can be used to show end user error message on his/her local language. Each error code is returned
        with associated HTTP status, as shown below:
          * EXTERNAL_SERVICE_ERROR - status code: 500
          * EXTERNAL_SERVICE_UNAVAILABLE - status code: 503
          * INTERNAL_SERVER_ERROR - status code: 500
          * ACCESS_FORBIDDEN - status code: 403
          * BAD_REQUEST - status code: 400
          * ILLEGAL_ARGUMENT - status code: 400
          * MEDIA_TYPE_NOT_ACCEPTABLE - status code: 406
          * MEDIA_TYPE_NOT_SUPPORTED - status code: 415
          * METHOD_ARGUMENT_CONSTRAINT_VIOLATION - status code: 400
          * METHOD_ARGUMENT_NOT_VALID - status code: 400
          * METHOD_ARGUMENT_TYPE_MISMATCH - status code: 400
          * MISSING_REQUEST_BODY - status code: 400
          * MISSING_REQUEST_HEADER - status code: 400
          * MISSING_REQUEST_PARAMETER - status code: 400
          * MISSING_REQUEST_PATH_VARIABLE - status code: 400
          * TOO_MANY_REQUESTS - status code: 429
          * RESOURCE_NOT_FOUND - status code: 404
          * REQUEST_METHOD_NOT_SUPPORTED - status code: 405
          * UNAUTHORIZED_ACCESS - status code: 401
          * UNSUPPORTED_COUNTRY_LOCATION - status code: 451
      enum:
        # Server errors
        - EXTERNAL_SERVICE_ERROR
        - EXTERNAL_SERVICE_UNAVAILABLE
        - INTERNAL_SERVER_ERROR
        # Client errors
        - ACCESS_FORBIDDEN
        - BAD_REQUEST
        - ILLEGAL_ARGUMENT
        - MEDIA_TYPE_NOT_ACCEPTABLE
        - MEDIA_TYPE_NOT_SUPPORTED
        - METHOD_ARGUMENT_CONSTRAINT_VIOLATION
        - METHOD_ARGUMENT_NOT_VALID
        - METHOD_ARGUMENT_TYPE_MISMATCH
        - MISSING_REQUEST_BODY
        - MISSING_REQUEST_HEADER
        - MISSING_REQUEST_PARAMETER
        - MISSING_REQUEST_PATH_VARIABLE
        - TOO_MANY_REQUESTS
        - RESOURCE_NOT_FOUND
        - REQUEST_METHOD_NOT_SUPPORTED
        - UNAUTHORIZED_ACCESS
        - UNSUPPORTED_COUNTRY_LOCATION

    PaginationMetadata:
      type: object
      description: Information about the subset of the entire collection returned in the payload.
      properties:
        currentPage:
          type: integer
          description: |
            Current page (group of items) retrieved from entire collection that matches request parameters.
            If there are no items, this value will be 0, otherwise it will be number greater than 0 (at least 1).
          minimum: 0
          example: 5
        nextPage:
          type: integer
          description: |
            Next page (group of items) available to retrieve from collection that matches request parameters. 
            If there are no next group of items, this value will be omitted.
          minimum: 2
          example: 6
        previousPage:
          type: integer
          description: |
            Previous page (group of items) available to retrieve from collection that matches request parameters. 
            If there are no previous group of items (client is on first page), this value will be omitted.
          minimum: 1
          example: 4
        totalItems:
          type: integer
          format: int64
          description: Total number of all items in the collection that matches request parameters.
          minimum: 0
          example: 100
        totalPages:
          type: integer
          description: |
            Total number of all pages (group of items) in entire collection that matches request parameters.
            If there are no items, this value will be 0, otherwise it will be number greater than 0 (at least 1).
          minimum: 0
          example: 10

    UserReactions:
      type: array
      description: List of all user reactions to specific item.
      example:
        - type: 'LIKE'
        - type: 'RECOMMEND'
      items:
        $ref: './common.yaml#/components/schemas/UserReaction'